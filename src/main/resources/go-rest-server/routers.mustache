// Code generated by openapi-generator; DO NOT EDIT.
{{>partial_header}}
package {{packageName}}

import (
	"net/http"
	"strings"
	"fmt"
	"github.com/gin-gonic/gin"
	"gitlab.techronex.com/infini/go-rest/v2"
	"gitlab.techronex.com/infini/go-rest/v2/status"
	"gitlab.techronex.com/infini/go-rest/v2/validate"
	"gitlab.techronex.com/infini/go-jsonlogger/v2"
)

// draw the routes
func draw(router *gin.Engine, method string, pattern string, handler gin.HandlerFunc) {
	switch method {
	case http.MethodGet:
		router.GET(pattern, handler)
	case http.MethodPost:
		router.POST(pattern, handler)
	case http.MethodPut:
		router.PUT(pattern, handler)
	case http.MethodDelete:
		router.DELETE(pattern, handler)
	case http.MethodPatch:
		router.PATCH(pattern, handler)
	}
}

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := jsonlogger.NewRouter()

	// configure the server.
	if err := Configure(router); err != nil {
		panic(err)
	}

	// draw routes
	{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
	// {{operationId}}
	draw(router, http.Method{{httpMethod}}, "{{{basePathWithoutHost}}}{{{path}}}", {{operationId}}Handler)
	{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

	return router
}

{{#authMethods}}
{{#isApiKey}}
// func {{name}} (c *gin.Context) (*Principal, error) {
//	apiKey, err := auth.NewApiKey(c.GetHeader("X-API-KEY"))
//	if err != nil {
//		return nil, err
//	}
//	{{^vendorExtensions.x-validate-local}}return apiKey.ValidateRemote(){{/vendorExtensions.x-validate-local}}
//	{{#vendorExtensions.x-validate-local}}return apiKey.Validate(){{/vendorExtensions.x-validate-local}}
//}
{{/isApiKey}}

{{/authMethods}}

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
// {{operationId}}Api API handler for {{operationId}}
type {{operationId}}Api struct {
	rest.API `json:"-"`

	{{#bodyParam}}
	// Body params
	body *{{dataType}}{{/bodyParam}}

	{{#headerParams}}
	// {{paramName}} {{baseName}}
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/headerParams}}

	{{#pathParams}}
	// Path params 
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/pathParams}}
	{{#queryParams}}
	// {{paramName}} query param: {{baseName}}
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{^isNullable}}{{^required}}*{{/required}}{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/queryParams}}

	// Form params
	{{#formParams}}
    {{#isBinary}}
    {{paramName}} *multipart.FileHeader `form:"{{baseName}}"{{#required}} binding:"required"{{/required}}`
    {{/isBinary}}
    {{^isBinary}}
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/isBinary}}
	{{/formParams}}
	{{#authMethods}}
	Principal *Principal // Principal
	{{#isBasicBearer}}
	{{/isBasicBearer}}
	{{/authMethods}}
}

// {{operationId}}Handler for {{operationId}} {{httpMethod}} {{{path}}} {{#description}}
// {{{description}}}{{/description}}
//go:generate go-codegen restapi-handler -name {{operationId}} -method {{httpMethod}} -path {{{path}}} {{#description}}-desc "{{{description}}}"{{/description}}
func {{operationId}}Handler (c *gin.Context) {
	// API context
	api := &{{operationId}}Api{}
	api.Context = c

	{{#authMethods}}{{#isBasicBearer}}
	// BasicBearer
	if api.Principal, api.Error = {{name}}(c); api.Error != nil {
		// Not authorized
		c.JSON(http.StatusUnauthorized, status.New(401, api.Error.Error()))
		return
	}
	{{/isBasicBearer}}{{#isApiKey}}
	{
		var err error
		api.Principal, err = {{name}}(c)
		if err != nil {
			c.JSON(http.StatusUnauthorized, status.New(401, err.Error()))
			return
		}
	}
	{{/isApiKey}}{{/authMethods}}

	{{#headerParams}}
	// header {{baseName}}
	api.{{paramName}} = c.GetHeader("{{baseName}}")
	{{/headerParams}}

	{{#pathParams}}
	// path params
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{/pathParams}}

	{{#queryParams}}
	// query param: {{baseName}}
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{#isNumber}}{{>partial_param_number}}{{/isNumber}}
	{{#isInteger}}{{>partial_param_integer}}{{/isInteger}}
	{{#isLong}}{{>partial_param_long}}{{/isLong}}
	{{#isDateTime}}{{>partial_param_datetime}}{{/isDateTime}}
	{{/queryParams}}

	{{#formParams}}
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{#isBinary}}{{>partial_param_binary}}{{/isBinary}}
	{{/formParams}}

	{{#bodyParam}}{{#required}}
	// Body is required
	{
		api.body = &{{dataType}}{}
		if err := c.ShouldBind(api.body); err != nil {
			c.JSON(http.StatusBadRequest, status.New(400, err.Error()))
			return
		}
	}
	{{^isPrimitiveType}}
	errs := api.body.Validates()
	if errs.HasError() {
		c.JSON(http.StatusBadRequest, status.New(400, errs.Error()))
		return
	}
	{{/isPrimitiveType}}{{/required}}{{^required}}
	// Body is optional
	{
		api.body = &{{dataType}}{}
		if err := c.ShouldBind(api.body); err != nil {
			c.JSON(http.StatusBadRequest, status.New(400, err.Error()))
			return
		}
	}
	{{^isPrimitiveType}}
	errs := api.body.Validates()
	if errs.HasError() {
		c.JSON(http.StatusBadRequest, status.New(400, errs.Error()))
		return
	}
	{{/isPrimitiveType}}{{/required}}{{/bodyParam}}

	// Handle the request
	c.JSON(api.Handle(c))
}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

